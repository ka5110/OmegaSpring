# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  - master

resources:
  - repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '3efeb1c7-c25d-4ea3-83be-c9d60596897f'
  imageRepository: 'kaomegaspring'
  containerRegistry: 'omegacr.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'omegacr204649d4-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'




stages:
  - stage: Build
    displayName: Build stage
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: Maven@2
            inputs:
                mavenPomFile: 'pom.xml'
                goals:'clean verify'
                publishJUnitResults:false
                javaHomeOption:'JDKVersion'
                mavenVersionOption:'Default'
                mavenAuthenticateFeed:false
                effectivePomSkip:false
                sonarQubeRunAnalysis:false
          - task: Docker@3
            displayName: Build and push an image to container registry
            inputs:
                command: buildAndPush
                repository: $(imageRepository)
                dockerfile: $(dockerfilePath)
                containerRegistry: $(dockerRegistryServiceConnection)
                tags: |
                  $(tag)
          - upload: manifests
            artifact: manifests

          
  - stage: Deploy
    displayName: Deploy stage
    dependsOn: Build

    jobs:
      - deployment: Deploy
        displayName: Deploy
        pool:
          vmImage: $(vmImageName)
        environment: 'ka5110OmegaSpring-6628.default'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: KubernetesManifest@0
                  displayName: Create imagePullSecret
                  inputs:
                    action: createSecret
                    secretName: $(imagePullSecret)
                    dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

                - task: KubernetesManifest@0
                  displayName: Deploy to Kubernetes cluster
                  inputs:
                    action: deploy
                    manifests: |      
                      $(Pipeline.Workspace)/manifests/backend-deployment.yml
                      $(Pipeline.Workspace)/manifests/LoadBalancerService.yml
                    imagePullSecrets: |
                      $(imagePullSecret)
                    containers: |
                      $(containerRegistry)/$(imageRepository):$(tag)

